<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head>	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">	<meta name="AppleTitle" content="HLCrypto Help"></meta>	<META NAME="AppleIcon" CONTENT="Help/images/CryptoIcon.jpg">	<meta name="copyright" content="Copyright 2020 Matthew Homer. All rights reserved.">	<title>HLCrypto Help</title></head><body><h1>HLCrypto Quick Start</h1><p><img src="images/overview.jpg" width="900" height="608"></p><h2>Setting up the RSA Engine</h2><p>First, determine the 'Character Set' making sure to include only ASCII characters between and including '!' and '}'.</p><p>Next, pick primes P and Q.  This will determine N where N = P * Q and Phi where Phi = (P-1) * (Q-1).</p><p>Finally, choose a prime (less than Phi) for the Public Key after which the Private Key is calculated using the Extended Euclid Algorithm.</p><p>At this point the RSA Engine is setup and ready to Encrypt and Decrypt text files.  The next step is to create a plaintext.txt file.</p><h2>How HLCrypto processes input files using the functions: HLChunker(), HLStringToInt(), and HLIntToString()</h2><p>The input file is 'chunked up' where the chunk size is C = log(N)/log(S) where S is the Character Set Size.  Each chunk is then converted to an Integer between 1 and N.  This Integer is then converted (Encoded or Decoded).  The converted Integer is then converted back to a chunk of characters.  Each converted chunk is then appended to an output file.  Use the Chosen Key to Encrypt and the Calculated Key to Decrypt.</p><p>When the Chunker is chunking a plaintext file, it always outputs the largest possible chunks creating large Integers when fed to the StringToInt function.  However, once these large Integers have been encoded, the new Integers can be of any size between 1 and N.  If they are small they will produce small chunks and the Chunker now needs a delimiter when it encounters small chunks.  A 'PaddingCharacter' is appended to small chunks and has been hard coded to '~'.  It is not part of the Character Set as it is stripped out when consumed by the Chunker.  So, for plaintext, the Chunker does not append the delimiter as there will not be any small chunks except for possibly the last one and a delimiter is not needed for the last chunk.  But, for ciphertext, if the computed Integer is less than CharacterSetSize**Floor(ChunkSize), the paddingChar is appended to the chunk returned from the IntToString function. </p><h2>The Problem with the First Character in the Character Set having a Zero Index Value</h2><p>For example, suppose the first character in the Character Set is '-'.  A plaintext string of '--' would convert to Integer 0 and Integer 0 converts to string '-' which is not '--'.  As such, the IndexZero character can not be in the plaintext least one of them ends up being the first character in a chunk.  To avoid this, the Encrypter String Sanitizer  will replace any CharacterSet.first character with the CharacterSet.last character.  This substitution does not happen in the Decrypter String Sanitizer.  Choose the character for CharacterSet.first to be something not needed/expected in the plaintext.  Choose CharacterSet.last to be something uncommon and easily spotted as a likely invalid character substitution.</p><h2>Creating the Plaintext.txt File</h2><p>Using any Text Editor to create a plaintext.txt file using only the characters from the Charater Set but NOT CharacterSet.first which internaly represents zero and can break the Encrypt process.  If a CharacterSet.first is found in the plaintext string it will be replaced with CharacterSet.last before being fed to the Chunker.  Save this file where you want the Ciphertext and Deciphertext files to be created.</p><h2>Setting up Plaintext and Ciphertext file paths for an Encrypt operation</h2><p>The Encrypt button will become enabled once the Plaintext and Ciphertext file paths have been set.  If the Plaintext path has not been already set, you will see an OpenPanel dialog where you can select the plaintext file to be encrypted.  Likewise, if the Ciphertext path has not been set, you will see a SavePanel dialog where you can specify the path and filename of the Ciphertext file.  These paths are saved and bookmarked for future Encode operations.</p><h2>Setting up Ciphertext and DeCiphertext filepaths for a Decrypt operation</h2><p>The Decrypt button will become enabled once the Ciphertext and DeCiphertext file paths have been set.  If the Ciphertext path has not been already set, you will see an OpenPanel dialog where you can select the ciphertext file to be decrypted.  Likewise, if the DeCiphertext path has not been set, you will see a SavePanel dialog where you can specify the path and filename of the DeCiphertext file.  These paths are saved and bookmarked for future Decode operations.</p></body></html>